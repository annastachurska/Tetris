/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/newtetris_ES6.jsx":
/*!******************************!*\
  !*** ./js/newtetris_ES6.jsx ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n    // class containing the Game\n    var Game = function () {\n        function Game(setWidth, setHeight) {\n            _classCallCheck(this, Game);\n\n            this.boardContainer = document.querySelector('section#tetris'); // container of all elements\n            this.width = setWidth; // setting the game width - number of elements in wrow based on User settings\n            this.height = setHeight; //setting of game height - number of elements in column based on User setting\n            this.points = 0; // number of points scored by User dugin the game\n            this.elementTable = [[[1], [1], [1], [1]], [[1, 1], [1, 1]], [[1, 0], [1, 1], [1, 0]], [[0, 1, 0], [1, 1, 1], [0, 1, 0]], [[0, 1, 1], [1, 1, 0]], [[1, 1, 0], [0, 1, 1]], [[1, 0, 0], [1, 1, 1]], [[0, 0, 1], [1, 1, 1]], [[1]]]; // table of items dropping down during the game\n            this.positionX = Math.floor(Number(setWidth / 2)); //posiition X of item\n            this.positionY = 0; // position Y of item\n            this.element = null; // dropping-down element\n            this.isSwitchedSideKeys = false; //condition showing whether the keys are switched (rotate and switch buttons)\n            this.slowDownTimesToUse = 4; // limiter for slow-down button ti be used\n            this.isFinished = false; // states whether game is finished\n        }\n\n        //function to create a board based on settings selected by user\n        // it creates elemens of board\n        // it sets the width and height of board container\n        // it creates this.board - table of all divs\n\n\n        _createClass(Game, [{\n            key: \"createBoard\",\n            value: function createBoard() {\n                this.boardContainer.style.width = String(this.width * 20) + \"px\";\n                this.boardContainer.style.height = String(this.height * 20) + \"px\";\n                var numberOfElements = this.width * this.height;\n                for (var i = 0; i < numberOfElements; i++) {\n                    var newDiv = document.createElement(\"div\");\n                    this.boardContainer.appendChild(newDiv);\n                }\n                this.board = document.querySelectorAll(\"#tetris div\");\n            }\n\n            // function to create a matrix filled with 0 corresponding to elements of a board\n            // it returs 2-dimensional matrix which single item will be matrix[y][x]\n\n        }, {\n            key: \"createMatrix\",\n            value: function createMatrix() {\n                var newMatrix = [];\n                for (var i = 0; i < this.height; i++) {\n                    var newMatrixRaw = new Array(this.width).fill(0);\n                    //let newMatrixRaw = Array(...Array(this.width)).map(() => 0);\n                    newMatrix.push(newMatrixRaw);\n                }\n                this.matrix = newMatrix;\n            }\n\n            // function which returns index of this.board corrensonding to y - rows and x-columns position of element\n\n        }, {\n            key: \"index\",\n            value: function index(x, y) {\n                return x + y * this.width;\n            }\n\n            // function which choose randomly the element from the elementTable item and returns it\n\n        }, {\n            key: \"findRandomElement\",\n            value: function findRandomElement() {\n                var number = Math.floor(Math.random() * 9);\n                this.number = number;\n                return this.elementTable[number];\n            }\n\n            // function that detonates the bomb, returns new matrix and colors the board(update the view)\n\n        }, {\n            key: \"detonateBomb\",\n            value: function detonateBomb() {\n                var _this = this;\n\n                var newMatrix = this.matrix;\n                var neightbourItems = [[this.positionY - 1, this.positionX - 1], [this.positionY - 1, this.positionX], [this.positionY - 1, this.positionX + 1], [this.positionY, this.positionX - 1], [this.positionY, this.positionX], [this.positionY, this.positionX + 1], [this.positionY + 1, this.positionX - 1], [this.positionY + 1, this.positionX], [this.positionY + 1, this.positionX + 1]];\n\n                neightbourItems.forEach(function (element) {\n                    if (element[0] >= 0 && element[0] < _this.height && element[1] >= 0 && element[1] < _this.width) {\n                        newMatrix[element[0]][element[1]] = 0;\n                    }\n                });\n                this.matrix = newMatrix;\n                this.colorBoard();\n            }\n\n            // function setting up starting element return this.element\n\n        }, {\n            key: \"setStartingElement\",\n            value: function setStartingElement() {\n                this.element = this.findRandomElement();\n            }\n\n            //function which rotates element - returns rotated element as 2D-matrix\n\n        }, {\n            key: \"rotateElement\",\n            value: function rotateElement() {\n                var rotatedElement = [];\n                for (var i = 0; i < this.element[0].length; i++) {\n                    var rotatedElementLine = [];\n                    for (var j = this.element.length - 1; j >= 0; j--) {\n                        rotatedElementLine.push(this.element[j][i]);\n                    }\n                    rotatedElement.push(rotatedElementLine);\n                }\n                return rotatedElement;\n            }\n\n            //function for handling pressed keys\n\n        }, {\n            key: \"changeDirection\",\n            value: function changeDirection(event) {\n                switch (event.which) {\n                    case 37:\n                        if (this.positionX >= 1 && !this.checkLeftCollision()) {\n                            this.hideElement();\n                            this.positionX -= 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 39:\n                        if (this.positionX < this.width - this.element[0].length && !this.checkRightCollision()) {\n                            this.hideElement();\n                            this.positionX += 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 38:\n                        if (this.positionX <= this.width - this.element.length && this.positionY <= this.height - this.element[0].length && !this.checkRotatedCollision()) {\n                            this.hideElement();\n                            this.element = this.rotateElement();\n                            this.showElement();\n                        }\n                        break;\n\n                    case 40:\n                        clearInterval(this.idSetInterval);\n                        var self = this;\n                        this.changeInt(50);\n                        break;\n                }\n            }\n\n            //function for handling pressing of keys for special buttons (rotate tetris and switch sides)\n\n        }, {\n            key: \"changeDirectionOpposite\",\n            value: function changeDirectionOpposite(event) {\n                switch (event.which) {\n                    case 39:\n                        if (this.positionX >= 1 && !this.checkLeftCollision()) {\n                            this.hideElement();\n                            this.positionX -= 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 37:\n                        if (this.positionX < this.width - this.element[0].length && !this.checkRightCollision()) {\n                            this.hideElement();\n                            this.positionX += 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 38:\n                        if (this.positionX <= this.width - this.element.length && this.positionY <= this.height - this.element[0].length && !this.checkRotatedCollision()) {\n                            this.hideElement();\n                            this.element = this.rotateElement();\n                            this.showElement();\n                        }\n                        break;\n\n                    case 40:\n                        clearInterval(this.idSetInterval);\n                        var self = this;\n                        this.changeInt(50);\n                        break;\n                }\n            }\n\n            // function which returs boolean checking whether element can be rotated (it next position is possible and not already taken)\n\n        }, {\n            key: \"checkRotatedCollision\",\n            value: function checkRotatedCollision() {\n                var rotated = this.rotateElement();\n                for (var j = rotated.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < rotated[j].length; i++) {\n                        if (rotated[j][i] == 1 && this.matrix[this.positionY + j][this.positionX + i] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            // function coloring dropping-down element\n            // for normal element it colors it in black, for bomb it colors it red\n\n        }, {\n            key: \"showElement\",\n            value: function showElement() {\n                for (var i = 0; i < this.element.length; i++) {\n                    for (var j = 0; j < this.element[i].length; j++) {\n                        if (this.element[i][j] == 1) {\n                            var element = this.index(j + this.positionX, i + this.positionY);\n                            if (this.number == 8) {\n                                this.board[element].style.backgroundColor = 'red';\n                            } else {\n                                this.board[element].style.backgroundColor = 'black';\n                            }\n                        }\n                    }\n                }\n            }\n\n            // function which adds the dropping-down lement to the matrix when dropping-down is no longer possible\n            // returns new this.matrix including element\n            // it does not apply to bomb element - selection done later\n\n        }, {\n            key: \"addElementToMatrix\",\n            value: function addElementToMatrix() {\n                for (var i = 0; i < this.element.length; i++) {\n                    for (var j = 0; j < this.element[i].length; j++) {\n                        if (this.element[i][j] == 1) {\n                            this.matrix[i + this.positionY][j + this.positionX] = 1;\n                        }\n                    }\n                }\n            }\n\n            //function which hides element by changing it style(background color) to white\n            // used when element is dropping down\n\n        }, {\n            key: \"hideElement\",\n            value: function hideElement() {\n                for (var i = 0; i < this.element.length; i++) {\n                    for (var j = 0; j < this.element[i].length; j++) {\n                        if (this.element[i][j] == 1) {\n                            var element = this.index(j + this.positionX, i + this.positionY);\n                            this.board[element].style.backgroundColor = 'white';\n                        }\n                    }\n                }\n            }\n\n            // function dropping down element\n            // it hides element, drops it down my adding 1 to positionY and then shows element only\n            // when element will be inside a board and will not collide with other elements\n            // additionally it calls the function handling description necessary for bomb element\n            // it stops the game if elemeent cannot fall down from initial position\n            // for collision it calls the function to add element to this.matrix or for bomb it detonates it\n            // calls setNewState - dropping down of new element\n\n        }, {\n            key: \"moveElement\",\n            value: function moveElement() {\n                this.handleBombDescription();\n                if (this.positionY + 1 <= this.height - this.element.length && !this.checkCollisionWithMatrix()) {\n                    this.hideElement();\n                    this.positionY += 1;\n                    this.showElement();\n                } else {\n                    if (this.positionY == 0) {\n                        this.isFinished = true;\n                        this.finishGame();\n                    }\n\n                    if (this.number == 8) {\n                        this.detonateBomb();\n                    } else {\n                        this.addElementToMatrix();\n                    }\n\n                    this.setNewState();\n                }\n            }\n\n            // function handling dropping down of a new element\n            // removing complete rows, setting new X and Y positions and generating and showing new element;\n\n        }, {\n            key: \"setNewState\",\n            value: function setNewState() {\n                document.querySelector('.tetrisInfo_text').innerText = '';\n                this.removeCompleteRows();\n                this.positionY = 0;\n                this.positionX = Math.floor(this.width / 2);\n                this.element = this.findRandomElement();\n                this.showElement();\n            }\n\n            // function which checks whether element can be mover left\n            // returns boolean\n            // returns true if it collides thus cannot be moved\n\n        }, {\n            key: \"checkLeftCollision\",\n            value: function checkLeftCollision() {\n                for (var j = this.element.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < this.element[j].length; i++) {\n                        if (this.element[j][i] == 1 && this.matrix[this.positionY + j][this.positionX + i - 1] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            // function similar to checkLeftCollision()\n\n        }, {\n            key: \"checkRightCollision\",\n            value: function checkRightCollision() {\n                for (var j = this.element.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < this.element[j].length; i++) {\n                        if (this.element[j][i] == 1 && this.matrix[this.positionY + j][this.positionX + i + 1] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            // function which checks whether element can drop-down left\n            // returns boolean\n            // returns true if it collides thus cannot be moved\n\n        }, {\n            key: \"checkCollisionWithMatrix\",\n            value: function checkCollisionWithMatrix() {\n                for (var j = this.element.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < this.element[0].length; i++) {\n                        if (this.element[j][i] == 1 && this.matrix[this.positionY + j + 1][this.positionX + i] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n\n            // function removing complete rows\n            // removes complete rows (complete rows is a row composed of this.width(or this.matrix[i].length) of taken cells (filled with 1)\n            // it updates this.points and .tetris_points element\n            // colors board according to new this.matrix indexes\n\n        }, {\n            key: \"removeCompleteRows\",\n            value: function removeCompleteRows() {\n                var toRemove = [];\n                var newMatrix = [];\n\n                for (var i = 0; i < this.matrix.length; i++) {\n                    var sum = this.matrix[i].reduce(function (prev, next) {\n                        return prev + next;\n                    });\n                    if (sum == this.matrix[i].length) {\n                        toRemove.push(1);\n                        var newMatrixRaw = new Array(this.width).fill(0);\n                        newMatrix.push(newMatrixRaw);\n                        this.points++;\n                    } else {\n                        toRemove.push(0);\n                    }\n                }\n\n                var numberOfCompleteRows = toRemove.reduce(function (prev, next) {\n                    return prev + next;\n                });\n                if (numberOfCompleteRows > 0) {\n                    for (var _i = 0; _i < this.matrix.length; _i++) {\n                        if (toRemove[_i] == 0) {\n                            newMatrix.push(this.matrix[_i]);\n                        }\n                    }\n                    document.querySelector('.tetris_points').innerText = \"Points: \" + this.points;\n                    this.matrix = newMatrix;\n                    this.colorBoard();\n                }\n            }\n\n            // function with colors divs (elements of board) in white when this.matrix element is filled with 0\n            // or with black then this.matrix coresponding element is filled with 1\n\n        }, {\n            key: \"colorBoard\",\n            value: function colorBoard() {\n                for (var i = 0; i < this.height; i++) {\n                    for (var j = 0; j < this.width; j++) {\n                        var element = this.index(j, i);\n                        if (this.matrix[i][j] == 1) {\n                            this.board[element].style.backgroundColor = 'black';\n                        } else {\n                            this.board[element].style.backgroundColor = 'white';\n                        }\n                    }\n                }\n            }\n\n            // function called when the games starts\n            // creates board, creates matrix willed with 0, sets starting element with is not a bomb, shows starting element,\n            // colors board, starts interval with 250ms and adds function for handling buttons\n            // updates the innerTest in slowDown button\n\n        }, {\n            key: \"startGame\",\n            value: function startGame() {\n                document.querySelector('.tetris_slowDown').innerText = \"Slow down (\" + this.slowDownTimesToUse + \" to use)\";\n                this.createBoard();\n                this.createMatrix();\n                this.setStartingElement();\n                while (this.number == 8) {\n                    this.setStartingElement();\n                }\n                this.showElement();\n                this.colorBoard();\n                this.changeInt(250);\n                this.handleButtons();\n            }\n\n            // function which takes as a argument the time to be set as interval in the game (time between drop of element for 1 row down)\n            // if new element appear (positionY =0) it clears interval and starts it again with defauls setting 250 - done for handling slow-down button\n            // it also updates the disable status for slow-down button\n\n        }, {\n            key: \"changeInt\",\n            value: function changeInt(val) {\n                var self = this;\n                if (this.isFinished == false) {\n                    this.idSetInterval = setInterval(function () {\n                        self.moveElement();\n                        if (self.positionY == 0) {\n                            self.handleSlowDownButtonVisibility();\n                            clearInterval(self.idSetInterval);\n                            self.changeInt(250);\n                        }\n                    }, val);\n                }\n            }\n\n            // function for adding event after click on rotate button\n            // apart rotating board it adapts innerText in rotate button\n            // it switches action of left and right arrow to make it easier for player (left will be player left not board left)\n\n        }, {\n            key: \"handleRotateButton\",\n            value: function handleRotateButton() {\n                var self = this;\n                document.querySelector('.tetris_rotate').addEventListener('click', function (e) {\n                    document.querySelector('#tetris').style.transform = document.querySelector('#tetris').style.transform == 'rotate(180deg)' ? 'rotate(0deg)' : 'rotate(180deg)';\n                    e.target.innerText = document.querySelector('#tetris').style.transform == 'rotate(180deg)' ? 'Tetris rotated' : 'Rotate tetris';\n                    self.isSwitchedSideKeys = self.isSwitchedSideKeys == false ? true : false;\n                });\n            }\n\n            // function for adding event after click on slowDown button\n            // it clears interval, sets new one with time 1s, disables the button for time of dropping of 1 element\n            // redues this.slowDownTimesToUse and updates innerText in the button accordingly\n\n        }, {\n            key: \"handleSlowDownButton\",\n            value: function handleSlowDownButton() {\n                var _this2 = this;\n\n                var self = this;\n                document.querySelector('.tetris_slowDown').addEventListener('click', function (e) {\n                    self.slowDownTimesToUse--;\n                    clearInterval(self.idSetInterval);\n                    self.changeInt(1000);\n                    e.target.disabled = true;\n                    e.target.innerText = \"Slow down (\" + _this2.slowDownTimesToUse + \" to use)\";\n                });\n            }\n\n            // function which updates the disabled attribute for slowDown button according to this.slowDownTimesToUse\n            // thus accorrding to number of times which it has been already used\n\n        }, {\n            key: \"handleSlowDownButtonVisibility\",\n            value: function handleSlowDownButtonVisibility() {\n                if (this.slowDownTimesToUse == 0) {\n                    document.querySelector('.tetris_slowDown').disabled = true;\n                } else {\n                    document.querySelector('.tetris_slowDown').disabled = false;\n                }\n            }\n\n            // function for adding event after click on keys button\n            // it modifies the parameter this.isSwitchedSideKesy which chooses the function for handling keys\n            // it modifies the innerText on key button\n\n        }, {\n            key: \"handleChageKeysButton\",\n            value: function handleChageKeysButton() {\n                var self = this;\n                document.querySelector('.tetris_keys').addEventListener('click', function (e) {\n                    self.isSwitchedSideKeys = self.isSwitchedSideKeys == false ? true : false;\n                    e.target.innerText = self.isSwitchedSideKeys == false ? 'Switch sides' : 'Sides are switched';\n                });\n            }\n\n            // function containing all functions necessary for handling additional keys and presence of description of buttons\n            // and action when mouse will be over button of interest\n\n        }, {\n            key: \"handleButtons\",\n            value: function handleButtons() {\n                this.handleRotateButton();\n                this.handleSlowDownButton();\n                this.handleChageKeysButton();\n                this.handleMouseOverButtons();\n            }\n\n            // function which sets the descriptin of bomb in .tetrisInfo_text element when bomb is picked up\n\n        }, {\n            key: \"handleBombDescription\",\n            value: function handleBombDescription() {\n                if (this.number == 8) {\n                    document.querySelector('.tetrisInfo_text').innerText = 'THE BOMB is falling. When it will reeach the surface it will detonate destroying everything in radius of 1 element';\n                }\n            }\n\n            // function for adding event after mouseenter and mouseleave on additional buttons(rotate, key and slow down)\n            // it shows the description of button when mouse will enter the button of interest and removes the description\n            // when mouse will leave the button\n\n        }, {\n            key: \"handleMouseOverButtons\",\n            value: function handleMouseOverButtons() {\n                var btnList = [['.tetris_rotate', 'When clicked rotates board upside-down. Usage: unlimited'], ['.tetris_keys', 'When clicked the action of left and rught arrows are switched (left arrow moves element to the right and right arrow moves element to the left). Usage: unlimited'], ['.tetris_slowDown', 'When clicked slows down the game for dropping of single element. Can be used 4 times']];\n                btnList.forEach(function (element) {\n                    document.querySelector(element[0]).addEventListener('mouseenter', function () {\n                        document.querySelector('.tetrisInfo_text').innerText = element[1];\n                    });\n                    document.querySelector(element[0]).addEventListener('mouseleave', function () {\n                        document.querySelector('.tetrisInfo_text').innerText = '';\n                    });\n                });\n            }\n\n            // function handling finishing the game\n            // it shows .finishedGame element and hides .tetrisContainer(game)\n\n        }, {\n            key: \"finishGame\",\n            value: function finishGame() {\n                clearInterval(this.idSetInterval);\n                var finalDiv = document.querySelector('.finishedGame');\n                document.querySelector('.tetrisContainer').style.display = 'none';\n                finalDiv.style.display = 'block';\n                if (this.points == 0) {\n                    document.querySelector('.finishedGame_points').innerText = \"Ohh no... You haven't scored any points.\";\n                    document.querySelector('.finishedGame_text').innerText = 'Here is your consolation prize.';\n                } else {\n                    document.querySelector('.finishedGame_points').innerText = \"You have scored \" + this.points + \" points.\";\n                    document.querySelector('.finishedGame_text').innerText = \"Here is your reward.\";\n                }\n                document.querySelector('.finishedGame_joke').innerText = dataJoke;\n\n                if (dataJoke.length > 180) {\n                    document.querySelector('.finishedGame_joke').style.fontSize = '22px';\n                }\n            }\n        }]);\n\n        return Game;\n    }();\n\n    // adding event listener to start button allowing starting the game\n\n\n    document.querySelector('.start_button').addEventListener('click', function () {\n        document.querySelector('.start').style.display = 'none';\n        document.querySelector('.introduction').style.display = 'block';\n    });\n\n    var isInappropriate = false;\n    var dataWhole = null;\n    var dataJoke = null;\n    var uglyWords = ['vagina', 'condom', 'rape', 'nipples', 'gay', 'fag', 'faggot', 'turd', 'scag', 'arse', 'arsehole', 'ass', 'bastard', 'basterd', 'bellend', 'berk', 'bint', 'bitch', 'bollocks', 'bugger', 'cad', 'cack', 'cock', 'cunt', 'crap', 'dick', 'dickhead', 'duffer', 'fuck', 'feck', 'knob', 'minger', 'munter', 'naff', 'nutter', 'piss', 'scrubber', 'shit', 'shite', 'tosser', 'twat', 'wank', 'wanker', 'nigger', 'nigga', 'gook', 'coon', 'spade', 'pregnant', 'sluts', 'erections', 'slut', 'erection'];\n    var jokesTable = [\"Chuck Norris brushes his teeth with a machine gun and flosses with a lightsaber.\", \"The only mistake that Chuck Norris has committed was when he thought he did a mistake.\", \"Chuck Norris didn't audition for walker texas ranger he made da producers audition to film his life.\"];\n\n    // function which downloads the random joke about Chuck Norris from API\n    // if joke contains any of words present in unglyWords table it will be replaced with random joke about CHN from jokesTable\n    // if will will be impossible to connect with API the dataJoke will be created as a random joke about CHN from jokesTable\n    function handleJoke() {\n        fetch('https://api.chucknorris.io/jokes/random').then(function (resp) {\n            return resp.json();\n        }).then(function (data) {\n            dataJoke = data.value;\n            uglyWords.forEach(function (element) {\n                if (dataJoke.indexOf(element) !== -1) {\n                    isInappropriate = true;\n                    var randomNumber = Math.floor(Math.random() * 3);\n                    dataJoke = jokesTable[randomNumber];\n                }\n            });\n        }).catch(function (err) {\n            var randomNumber = Math.floor(Math.random() * 3);\n            dataJoke = jokesTable[randomNumber];\n            isInappropriate = true;\n        });\n    }\n\n    // function that adds event listner to introduction button which allows to proceed only when selected value is in designed range\n    // it creates new game based on values defined by Player and starts it\n    // it closes the introductory element and displays the game\n    // it adds event listener allowing response of game to player key-pressing\n    // it downloads joke about ChuckNorris used reward\n    document.querySelector('.introduction_button').addEventListener('click', function (element) {\n        var newWidth = document.querySelector('.introduction_input[name=\"width\"]').value;\n        var newHeight = document.querySelector('.introduction_input[name=\"height\"]').value;\n        if (newWidth >= 10 && newWidth <= 20 && newHeight >= 10 && newHeight <= 20) {\n            var userHeight = Number(newHeight);\n            var userWidth = Number(newWidth);\n\n            document.querySelector('.introduction').style.display = 'none';\n            document.querySelector('.tetrisContainer').style.display = 'flex';\n\n            var game = new Game(userWidth, userHeight);\n            game.startGame();\n\n            document.addEventListener('keydown', function (event) {\n                if (game.isSwitchedSideKeys == true) {\n                    game.changeDirectionOpposite(event);\n                } else {\n                    game.changeDirection(event);\n                }\n            });\n\n            handleJoke();\n        } else {\n            document.querySelector('.introduction_message').innerText = 'Please choose numbers between 10-20';\n        }\n    });\n});\n\n//# sourceURL=webpack:///./js/newtetris_ES6.jsx?");

/***/ }),

/***/ "./node_modules/whatwg-fetch/fetch.js":
/*!********************************************!*\
  !*** ./node_modules/whatwg-fetch/fetch.js ***!
  \********************************************/
/*! exports provided: Headers, Request, Response, DOMException, fetch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Headers\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Request\", function() { return Request; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Response\", function() { return Response; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOMException\", function() { return DOMException; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fetch\", function() { return fetch; });\nvar support = {\n  searchParams: 'URLSearchParams' in self,\n  iterable: 'Symbol' in self && 'iterator' in Symbol,\n  blob:\n    'FileReader' in self &&\n    'Blob' in self &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in self,\n  arrayBuffer: 'ArrayBuffer' in self\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n    throw new TypeError('Invalid character in header field name')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n    var parts = line.split(':')\n    var key = parts.shift().trim()\n    if (key) {\n      var value = parts.join(':').trim()\n      headers.append(key, value)\n    }\n  })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = 'statusText' in options ? options.statusText : 'OK'\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = self.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      resolve(new Response(body, options))\n    }\n\n    xhr.onerror = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.ontimeout = function() {\n      reject(new TypeError('Network request failed'))\n    }\n\n    xhr.onabort = function() {\n      reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    xhr.open(request.method, request.url, true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr && support.blob) {\n      xhr.responseType = 'blob'\n    }\n\n    request.headers.forEach(function(value, name) {\n      xhr.setRequestHeader(name, value)\n    })\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch.polyfill = true\n\nif (!self.fetch) {\n  self.fetch = fetch\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n}\n\n\n//# sourceURL=webpack:///./node_modules/whatwg-fetch/fetch.js?");

/***/ }),

/***/ 0:
/*!*************************************************!*\
  !*** multi whatwg-fetch ./js/newtetris_ES6.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! whatwg-fetch */\"./node_modules/whatwg-fetch/fetch.js\");\nmodule.exports = __webpack_require__(/*! ./js/newtetris_ES6.jsx */\"./js/newtetris_ES6.jsx\");\n\n\n//# sourceURL=webpack:///multi_whatwg-fetch_./js/newtetris_ES6.jsx?");

/***/ })

/******/ });