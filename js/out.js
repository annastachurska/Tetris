/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/newtetris_ES6.jsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/newtetris_ES6.jsx":
/*!******************************!*\
  !*** ./js/newtetris_ES6.jsx ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    console.log(\"dziaÅ‚a\");\n\n    var Game = function () {\n        function Game(setWidth, setHeight) {\n            _classCallCheck(this, Game);\n\n            this.boardContainer = document.querySelector('section#tetris');\n            this.width = setWidth;\n            this.height = setHeight;\n            this.points = 0;\n            this.elementTable = [[[1], [1], [1], [1]], [[1, 1], [1, 1]], [[1, 0], [1, 1], [1, 0]], [[0, 1, 0], [1, 1, 1], [0, 1, 0]], [[0, 1, 1], [1, 1, 0]], [[1, 1, 0], [0, 1, 1]], [[1, 0, 0], [1, 1, 1]], [[0, 0, 1], [1, 1, 1]]];\n            this.positionX = Math.floor(Number(setWidth / 2));\n            this.positionY = 0;\n            this.element = null;\n            this.isSwitchedSideKeys = false;\n            this.isWandClicked = false;\n            this.isSlowedDown = false;\n            this.isElementUpsideDown = false;\n            this.wandTimesToUse = 4;\n        }\n\n        _createClass(Game, [{\n            key: \"createBoard\",\n            value: function createBoard() {\n                this.boardContainer.style.width = String(this.width * 20) + \"px\";\n                this.boardContainer.style.height = String(this.height * 20) + \"px\";\n                var numberOfElements = this.width * this.height;\n                for (var i = 0; i < numberOfElements; i++) {\n                    var newDiv = document.createElement(\"div\");\n                    this.boardContainer.appendChild(newDiv);\n                }\n                this.board = document.querySelectorAll(\"#tetris div\");\n            }\n        }, {\n            key: \"createMatrix\",\n            value: function createMatrix() {\n                var newMatrix = [];\n                for (var i = 0; i < this.height; i++) {\n                    var newMatrixRaw = new Array(this.width).fill('0');\n                    //let newMatrixRaw = Array(...Array(this.width)).map(() => 0);\n                    newMatrix.push(newMatrixRaw);\n                }\n                this.matrix = newMatrix;\n            }\n            /*\r\n            jhgjhgjh\r\n            params: x- hghg\r\n                    y - iiuih\r\n            return: iuiuiu\r\n             */\n\n        }, {\n            key: \"index\",\n            value: function index(x, y) {\n                return x + y * this.width;\n            }\n        }, {\n            key: \"findRandomElement\",\n            value: function findRandomElement() {\n                var number = Math.floor(Math.random() * 8);\n                return this.elementTable[number];\n            }\n        }, {\n            key: \"setStartingElement\",\n            value: function setStartingElement() {\n                this.element = this.findRandomElement();\n            }\n        }, {\n            key: \"rotateElement\",\n            value: function rotateElement() {\n                var rotatedElement = [];\n                for (var i = 0; i < this.element[0].length; i++) {\n                    var rotatedElementLine = [];\n                    for (var j = this.element.length - 1; j >= 0; j--) {\n                        rotatedElementLine.push(this.element[j][i]);\n                    }\n                    rotatedElement.push(rotatedElementLine);\n                }\n                return rotatedElement;\n            }\n        }, {\n            key: \"changeDirection\",\n            value: function changeDirection(event) {\n                switch (event.which) {\n                    case 37:\n                        if (this.positionX >= 1 && !this.checkLeftCollision()) {\n                            this.hideElement();\n                            this.positionX -= 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 39:\n                        if (this.positionX < this.width - this.element[0].length && !this.checkRightCollision()) {\n                            this.hideElement();\n                            this.positionX += 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 38:\n                        if (this.positionX <= this.width - this.element.length && this.positionY <= this.height - this.element[0].length && !this.checkRotatedCollision()) {\n                            this.hideElement();\n                            this.element = this.rotateElement();\n                            this.showElement();\n                        }\n                        break;\n\n                    case 40:\n                        clearInterval(this.idSetInterval);\n                        var self = this;\n                        this.changeInt(50);\n                        break;\n                }\n            }\n        }, {\n            key: \"changeDirectionOpposite\",\n            value: function changeDirectionOpposite(event) {\n                switch (event.which) {\n                    case 39:\n                        if (this.positionX >= 1 && !this.checkLeftCollision()) {\n                            this.hideElement();\n                            this.positionX -= 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 37:\n                        if (this.positionX < this.width - this.element[0].length && !this.checkRightCollision()) {\n                            this.hideElement();\n                            this.positionX += 1;\n                            this.showElement();\n                        }\n                        break;\n\n                    case 40:\n                        if (this.positionX <= this.width - this.element.length && this.positionY <= this.height - this.element[0].length && !this.checkRotatedCollision()) {\n                            this.hideElement();\n                            this.element = this.rotateElement();\n                            this.showElement();\n                        }\n                        break;\n\n                    case 38:\n                        clearInterval(this.idSetInterval);\n                        var self = this;\n                        this.changeInt(50);\n                        break;\n                }\n            }\n        }, {\n            key: \"checkRotatedCollision\",\n            value: function checkRotatedCollision() {\n                var rotated = this.rotateElement();\n                for (var j = rotated.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < rotated[j].length; i++) {\n                        if (rotated[j][i] == 1 && this.matrix[this.positionY + j][this.positionX + i] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        }, {\n            key: \"showElement\",\n            value: function showElement() {\n                for (var i = 0; i < this.element.length; i++) {\n                    for (var j = 0; j < this.element[i].length; j++) {\n                        if (this.element[i][j] == 1) {\n                            var element = this.index(j + this.positionX, i + this.positionY);\n                            this.board[element].style.backgroundColor = 'black';\n                        }\n                    }\n                }\n            }\n        }, {\n            key: \"addElementToMatrix\",\n            value: function addElementToMatrix() {\n                for (var i = 0; i < this.element.length; i++) {\n                    for (var j = 0; j < this.element[i].length; j++) {\n                        if (this.element[i][j] == 1) {\n                            this.matrix[i + this.positionY][j + this.positionX] = 1;\n                        }\n                    }\n                }\n            }\n        }, {\n            key: \"hideElement\",\n            value: function hideElement() {\n                for (var i = 0; i < this.element.length; i++) {\n                    for (var j = 0; j < this.element[i].length; j++) {\n                        if (this.element[i][j] == 1) {\n                            var element = this.index(j + this.positionX, i + this.positionY);\n                            this.board[element].style.backgroundColor = 'white';\n                        }\n                    }\n                }\n            }\n        }, {\n            key: \"moveElement\",\n            value: function moveElement() {\n                // MUSZE DAC JAKO PIERWSZY KROK W STARCIE SHOW ELEMENT\n                if (this.positionY + 1 <= this.height - this.element.length && !this.checkCollisionWithMatrix()) {\n                    this.hideElement();\n                    this.positionY += 1;\n                    this.showElement();\n                } else {\n                    if (this.positionY == 0) {\n                        this.finishGame();\n                    }\n                    this.addElementToMatrix();\n                    this.removeCompleteRows();\n                    this.positionY = 0;\n                    this.positionX = Math.floor(this.width / 2);\n                    this.element = this.findRandomElement();\n                    this.showElement();\n                }\n            }\n        }, {\n            key: \"checkLeftCollision\",\n            value: function checkLeftCollision() {\n                for (var j = this.element.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < this.element[j].length; i++) {\n                        if (this.element[j][i] == 1 && this.matrix[this.positionY + j][this.positionX + i - 1] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        }, {\n            key: \"checkRightCollision\",\n            value: function checkRightCollision() {\n                for (var j = this.element.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < this.element[j].length; i++) {\n                        if (this.element[j][i] == 1 && this.matrix[this.positionY + j][this.positionX + i + 1] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        }, {\n            key: \"checkCollisionWithMatrix\",\n            value: function checkCollisionWithMatrix() {\n                for (var j = this.element.length - 1; j >= 0; j--) {\n                    for (var i = 0; i < this.element[0].length; i++) {\n                        if (this.element[j][i] == 1 && this.matrix[this.positionY + j + 1][this.positionX + i] == 1) {\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            }\n        }, {\n            key: \"removeCompleteRows\",\n            value: function removeCompleteRows() {\n                var shouldRepeat = true;\n                while (shouldRepeat) {\n                    shouldRepeat = false;\n                    var newMatrix = [];\n                    // newMatrix.push(Array(...Array(this.width)).map(() => 0));\n                    var newMatrixRaw = new Array(this.width).fill('0');\n                    newMatrix.push(newMatrixRaw);\n                    for (var i = this.matrix.length - 1; i >= 0; i--) {\n                        var sum = this.matrix[i].reduce(function (prev, next) {\n                            return prev + next;\n                        });\n                        if (sum == this.matrix[i].length) {\n                            shouldRepeat = true;\n                            this.points++;\n                            document.querySelector('.tetris_points').innerText = \"Points: \" + this.points;\n                            for (var j = 0; j < this.matrix.length; j++) {\n                                if (j < i || j > i) {\n                                    newMatrix.push(this.matrix[j]);\n                                }\n                            }\n                            this.matrix = newMatrix;\n                            this.colorBoard();\n                        }\n                    }\n                }\n            }\n        }, {\n            key: \"colorBoard\",\n            value: function colorBoard() {\n                for (var i = 0; i < this.height; i++) {\n                    for (var j = 0; j < this.width; j++) {\n                        var element = this.index(j, i);\n                        if (this.matrix[i][j] == 1) {\n                            // console.log(this.matrix[i][j]);\n                            this.board[element].style.backgroundColor = 'black';\n                        } else {\n                            this.board[element].style.backgroundColor = 'white';\n                        }\n                    }\n                }\n            }\n        }, {\n            key: \"startGame\",\n            value: function startGame() {\n                this.createBoard();\n                this.createMatrix();\n                this.setStartingElement();\n                this.showElement();\n                this.colorBoard();\n                this.changeInt(250);\n            }\n        }, {\n            key: \"changeInt\",\n            value: function changeInt(val) {\n                var self = this;\n                this.idSetInterval = setInterval(function () {\n                    self.moveElement();\n                    if (self.positionY == 0) {\n                        clearInterval(self.idSetInterval);\n                        self.changeInt(250);\n                    }\n                }, val);\n            }\n        }, {\n            key: \"slowDownOnKey\",\n            value: function slowDownOnKey() {\n                clearInterval(this.idSetInterval);\n                var self = this;\n                this.changeInt(1000);\n            }\n\n            // handleMagicWand(){\n            //     clearInterval(this.idSetInterval);\n            //     this.isWandClicked = true;\n            //     let self = this;\n            //     this.board.forEach((element, number => {\n            //         element.addEventListener('click', () => {\n            //\n            //             let x = number%this.width;\n            //             let y = Math.floor(number/self.width);\n            //\n            //             let element = this.index(y,x);\n            //             if (this.matrix[x][y] == 1) {\n            //                 // console.log(this.matrix[i][j]);\n            //                 this.board[element].style.backgroundColor = 'white';\n            //                 this.matrix[x][y] == 0;\n            //             } else {\n            //                 this.board[element].style.backgroundColor = 'black';\n            //                 this.matrix[x][y] == 1;\n            //             }\n            //             self.isWandClicked = false;\n            //         });\n            //     });\n            //\n            //     // handleClick(element);\n            //     changeInt(250);\n            // }\n            //\n            // handleClick(){\n            //\n            // }\n\n        }, {\n            key: \"finishGame\",\n            value: function finishGame() {\n                clearInterval(this.idSetInterval);\n                var finalDiv = document.querySelector('.finishedGame');\n                document.querySelector('.tetrisContainer').style.display = 'none';\n                finalDiv.style.display = 'block';\n                if (this.points == 0) {\n                    document.querySelector('.finishedGame_points').innerText = \"Ohh no... You haven't scored any points.\";\n                    document.querySelector('.finishedGame_text').innerText = 'Here is your consolation prize.';\n                } else {\n                    document.querySelector('.finishedGame_points').innerText = \"You have scored \" + this.points + \" points.\";\n                    document.querySelector('.finishedGame_text').innerText = \"Here is your reward.\";\n                }\n                document.querySelector('.finishedGame_joke').innerText = dataJoke;\n            }\n        }]);\n\n        return Game;\n    }();\n\n    document.querySelector('.start_button').addEventListener('click', function () {\n        document.querySelector('.start').style.display = 'none';\n        document.querySelector('.introduction').style.display = 'block';\n    });\n\n    var isInappropriate = true;\n    var countChuck = 0;\n    var dataWhole = null;\n    var dataJoke = null;\n    var uglyWords = ['vagina', 'condom', 'rape', 'nipples', 'gay', 'fag', 'faggot', 'turd', 'scag', 'arse', 'arsehole', 'ass', 'bastard', 'basterd', 'bellend', 'berk', 'bint', 'bitch', 'bollocks', 'bugger', 'cad', 'cack', 'cock', 'cunt', 'crap', 'dick', 'dickhead', 'duffer', 'fuck', 'feck', 'knob', 'minger', 'munter', 'naff', 'nutter', 'piss', 'scrubber', 'shit', 'shite', 'tosser', 'twat', 'wank', 'wanker', 'nigger', 'nigga', 'gook', 'coon', 'spade'];\n    var jokesTable = [\"Chuck Norris brushes his teeth with a machine gun and flosses with a lightsaber.\", \"The only mistake that Chuck Norris has committed was when he thought he did a mistake.\", \"Chuck Norris didn't audition for walker texas ranger he made da producers audition to film his life.\"];\n\n    while (isInappropriate) {\n        isInappropriate = false;\n        countChuck++;\n        fetch('https://api.chucknorris.io/jokes/random').then(function (resp) {\n            return resp.json();\n        }).then(function (data) {\n            // console.log('mam dane');\n            dataWhole = data;\n            dataJoke = data.value;\n            console.log(dataWhole);\n            console.log(dataJoke);\n            console.log(dataJoke.indexOf('Chuck'));\n\n            uglyWords.forEach(function (element) {\n                if (dataJoke.indexOf(element) !== -1) {\n                    console.log('losuj jeszzce raz');\n                    isInappropriate = true;\n                }\n            });\n        }).catch(function (err) {\n            console.log(err);\n            var randomNumber = Math.floor(Math.random() * 3);\n            dataJoke = jokesTable[randomNumber];\n            // console.log(randomNumber);\n            isInappropriate = true;\n        });\n        if (countChuck > 10) {\n            var randomNumber = Math.floor(Math.random() * 3);\n            dataJoke = jokesTable[randomNumber];\n            isInappropriate = true;\n        }\n    }\n\n    document.querySelector('.introduction_button').addEventListener('click', function (element) {\n        var newWidth = document.querySelector('.introduction_input[name=\"width\"]').value;\n        var newHeight = document.querySelector('.introduction_input[name=\"height\"]').value;\n        if (newWidth >= 10 && newWidth <= 20 && newHeight >= 10 && newHeight <= 20) {\n            var userHeight = Number(newHeight);\n            var userWidth = Number(newWidth);\n\n            document.querySelector('.introduction').style.display = 'none';\n            document.querySelector('.tetrisContainer').style.display = 'block';\n\n            var game = new Game(userWidth, userHeight);\n            game.startGame();\n\n            document.addEventListener('keydown', function (event) {\n                if (game.isSwitchedSideKeys == true) {\n                    game.changeDirectionOpposite(event);\n                } else {\n                    game.changeDirection(event);\n                }\n            });\n\n            document.querySelector('.tetris_rotate').addEventListener('click', function () {\n                document.querySelector('#tetris').style.transform = document.querySelector('#tetris').style.transform == 'rotate(180deg)' ? 'rotate(0deg)' : 'rotate(180deg)';\n            });\n\n            document.querySelector('.tetris_keys').addEventListener('click', function () {\n                game.isSwitchedSideKeys = game.isSwitchedSideKeys == false ? true : false;\n                document.querySelector('.tetris_keys').innerText = game.isSwitchedSideKeys == false ? 'Switch sides' : 'Sides are switched';\n                // console.log(game.isSwitchedSideKeys);\n            });\n\n            document.querySelector('.tetris_slowDown').addEventListener('click', function () {\n                game.slowDownOnKey();\n            });\n\n            // document.querySelector('.tetris_changeElement').addEventListener('click', ()=> {\n            //     game.handleMagicWand();\n            // });\n        } else {\n            document.querySelector('.introduction_message').innerText = 'Please choose numbers between 10-20';\n        }\n    });\n});\n\n//# sourceURL=webpack:///./js/newtetris_ES6.jsx?");

/***/ })

/******/ });